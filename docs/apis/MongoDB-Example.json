{
  "info": {
    "title": "MongoDB Example",
    "version": "1.0.0",
    "description": "SCIM 2.0 MongoDB Example API. Defines the SCIM 2.0 endpoints exposed for manage users and groups."
  },
  "tags": [
    {
      "name": "users",
      "description": "Users information"
    },
    {
      "name": "groups",
      "description": "Groups information"
    },
    {
      "name": "ping",
      "description": "Route used for health check"
    }
  ],
  "paths": {
    "/ping": {
      "get": {
        "tags": [
          "ping"
        ],
        "summary": "Health Check",
        "responses": {
          "200": {
            "description": "Successful response"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "List users resources",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Users"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Invalid token"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create a new user",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Invalid token"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Conflict (duplicated key)"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "List groups resources",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Groups"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Invalid token"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "Create a new group",
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Invalid token"
          },
          "404": {
            "description": "Not found"
          },
          "409": {
            "description": "Conflict (duplicated key)"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Group"
              }
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get a user by ID",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Invalid token"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "Update a user by ID",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Invalid token"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Partial Update of a user by ID",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Invalid token"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete a user by ID",
        "responses": {
          "204": {
            "content": {},
            "description": "User deleted successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Invalid token"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Unique user identifier"
        }
      ]
    },
    "/groups/{id}": {
      "get": {
        "tags": [
          "groups"
        ],
        "summary": "Get a group by ID",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Invalid token"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "put": {
        "tags": [
          "groups"
        ],
        "summary": "Update a group by ID",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Invalid token"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Group"
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "groups"
        ],
        "summary": "Partial Update of a group by ID",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            },
            "description": "Successful response"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Invalid token"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Group"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "groups"
        ],
        "summary": "Delete a group by ID",
        "responses": {
          "204": {
            "content": {},
            "description": "Group deleted successfully"
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Invalid token"
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      },
      "parameters": [
        {
          "in": "path",
          "name": "id",
          "schema": {
            "type": "string"
          },
          "required": true,
          "description": "Unique group identifier"
        }
      ]
    }
  },
  "openapi": "3.0.2",
  "servers": [
    {
      "url": "https://qscim-demo.qriarlabs.cloud/api/container/37882",
      "description": "Database: mongodb Connector"
    }
  ],
  "security": [
    {
      "basic": []
    }
  ],
  "components": {
    "schemas": {
      "Meta": {
        "type": "object",
        "properties": {
          "created": {
            "type": "string",
            "description": "The \"DateTime\" that the resource was added to the service provider."
          },
          "version": {
            "type": "string",
            "description": "The version of the resource being returned."
          },
          "location": {
            "type": "string",
            "description": "The URI of the resource being returned."
          },
          "lastModified": {
            "type": "string",
            "description": "The most recent DateTime that the details of this resource were updated at the service provider."
          },
          "resourceType": {
            "type": "string",
            "description": "The name of the resource type of the resource."
          }
        }
      },
      "Name": {
        "type": "object",
        "properties": {
          "formatted": {
            "type": "string",
            "description": "The full name, including all middle names, titles, and suffixes             as appropriate, formatted for display (e.g., 'Ms. Barbara Jane Jensen,             III')."
          },
          "givenName": {
            "type": "string",
            "description": "The given name of the User, or first name in most Western             languages (e.g., 'Barbara' given the full name' Ms. Barbara Jane             Jensen, III')."
          },
          "familyName": {
            "type": "string",
            "description": "The family name of the User, or last name in most Western             languages (e.g., 'Jensen' given the full name 'Ms. Barbara Jane Jensen,             III')."
          },
          "middleName": {
            "type": "string",
            "description": "The middle name(s) of the User (e.g., 'Jane' given the full             name 'Ms. Barbara Jane Jensen, III')."
          },
          "honorificPrefix": {
            "type": "string",
            "description": "The honorific prefix(es) of the User, or title in most Western             languages (e.g., 'Ms.' given the full name 'Ms. Barbara Jane Jensen,             III')."
          },
          "honorificSuffix": {
            "type": "string",
            "description": "The honorific suffix(es) of the User, or suffix in most Western             languages (e.g., 'III' given the full name 'Ms. Barbara Jane Jensen,             III')."
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "REQUIRED. A unique identifier for a SCIM resource as defined by the service provider."
          },
          "ims": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attribute"
            },
            "description": "Instant messaging address for the user."
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "name": {
            "$ref": "#/components/schemas/Name"
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of roles for the user that collectively represent who             the user is, e.g., 'Student', 'Faculty'."
          },
          "title": {
            "type": "string",
            "description": "The user's title, such as 'Vice President'."
          },
          "active": {
            "type": "boolean",
            "description": "A Boolean value indicating the user's administrative status."
          },
          "emails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attribute"
            },
            "description": "Email addresses for the User."
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member"
            },
            "description": "A list of groups to which the user belongs, either through             direct membership, through nested groups, or dynamically calculated."
          },
          "locale": {
            "type": "string",
            "description": "Used to indicate the User's default location for purposes             of localizing such items as currency, date time format, or numerical             representations."
          },
          "photos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attribute"
            },
            "description": "A URI that is a uniform resource locator (as defined in Section             1.1.3 of [RFC3986]) that points to a resource location representing             the user's image."
          },
          "schemas": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "REQUIRED. Array of Strings containing URIs that are used to indicate the namespaces of the SCIM schemas."
          },
          "nickName": {
            "type": "string",
            "description": "The casual way to address the user in real life, e.g.,             'Bob' or 'Bobby' instead of 'Robert'."
          },
          "password": {
            "type": "string",
            "description": "This attribute is intended to be used as a means to set, replace             or compare (i.e., filter for equality) a password."
          },
          "timezone": {
            "type": "string",
            "description": "The User's time zone, in IANA Time Zone database format [RFC6557],             also known as the 'Olson' time zone database format [Olson-TZ] (e.g.,             'America/Los_Angeles')."
          },
          "userName": {
            "type": "string",
            "description": "REQUIRED. A service provider's unique identifier for the user,             typically used by the user to directly authenticate to the service provider."
          },
          "userType": {
            "type": "string",
            "description": "Used to identify the relationship between the organization and the user."
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Address"
            },
            "description": "A physical mailing address for this user."
          },
          "externalId": {
            "type": "string",
            "description": "OPTIONAL. A String that is an identifier for the resource as defined by the provisioning client."
          },
          "profileUrl": {
            "type": "string",
            "description": "A URI that is a uniform resource locator and that points to             a location representing the user's online profile (e.g., a web page)."
          },
          "displayName": {
            "type": "string",
            "description": "The name of the user, suitable for display to end-users."
          },
          "entitlements": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of entitlements for the user that represent a thing the user has."
          },
          "phoneNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attribute"
            },
            "description": "Phone numbers for the user."
          },
          "preferredLanguage": {
            "type": "string",
            "description": "Indicates the user's preferred written or spoken languages and is generally used for selecting a localized user interface."
          }
        }
      },
      "Group": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "REQUIRED. A unique identifier for a SCIM resource as defined by the service provider."
          },
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Member"
            },
            "description": "A list of members of the Group."
          },
          "schemas": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "REQUIRED. Array of Strings containing URIs that are used to indicate the namespaces of the SCIM schemas."
          },
          "externalId": {
            "type": "string",
            "description": "OPTIONAL. A String that is an identifier for the resource as defined by the provisioning client."
          },
          "displayName": {
            "type": "string",
            "description": "REQUIRED. A human-readable name for the Group."
          }
        }
      },
      "Users": {
        "type": "object",
        "properties": {
          "schemas": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "REQUIRED. Array of Strings containing URIs that are used to indicate the namespaces of the SCIM schemas."
          },
          "Resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            },
            "description": "REQUIRED. A multi-valued list of complex objects containing the requested resources."
          },
          "totalResults": {
            "type": "integer",
            "description": "REQUIRED. The total number of results returned by the list or query operation."
          }
        }
      },
      "Groups": {
        "type": "object",
        "properties": {
          "schemas": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "REQUIRED. Array of Strings containing URIs that are used to indicate the namespaces of the SCIM schemas."
          },
          "Resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Group"
            },
            "description": "REQUIRED. A multi-valued list of complex objects containing the requested resources."
          },
          "totalResults": {
            "type": "integer",
            "description": "REQUIRED. The total number of results returned by the list or query operation."
          }
        }
      },
      "Member": {
        "type": "object",
        "properties": {
          "$ref": {
            "type": "string",
            "description": "The URI of a SCIM resource."
          },
          "value": {
            "type": "string",
            "description": "id attribute of a SCIM resource"
          },
          "display": {
            "type": "string",
            "description": "A human-readable name for the member"
          }
        }
      },
      "Address": {
        "type": "object",
        "properties": {
          "region": {
            "type": "string",
            "description": "The state or region component."
          },
          "country": {
            "type": "string",
            "description": "The country name component."
          },
          "locality": {
            "type": "string",
            "description": "The city or locality component."
          },
          "formatted": {
            "type": "string",
            "description": "The full mailing address, formatted for display or use with             a mailing label."
          },
          "postalCode": {
            "type": "string",
            "description": "The zip code or postal code component."
          },
          "streetAddress": {
            "type": "string",
            "description": "The full street address component, which may include house             number, street name, P.O. box, and multi-line extended street address             information."
          }
        }
      },
      "Attribute": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "A label indicating the attribute's function, e.g., 'work'             or 'home'."
          },
          "value": {
            "type": "string",
            "description": "The attribute's significant value, e.g., email address, phone             number."
          },
          "primary": {
            "type": "boolean",
            "description": "A Boolean value indicating the 'primary' or preferred attribute             value for this attribute, e.g., the preferred mailing address or the             primary email address."
          }
        }
      },
      "Certificate": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "DER-encoded X.509 certificate"
          }
        }
      }
    },
    "securitySchemes": {
      "basic": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}